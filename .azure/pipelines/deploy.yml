trigger:
  branches:
    include:
    - master
  paths:
    include:
    - arm/
    - .azure/pipelines/
    - src/

name: $(Date:yyyyMMdd)$(Rev:.r).$(Build.SourceBranch)

parameters:
- name: overrideDeploy
  displayName: Trigger deploy if not on master branch?
  type: boolean
  default: false
- name: resourceGroupNameBase
  displayName: Resource Group base name to use if deploying ('useDefault' pulls from config)
  type: string
  default: useDefault
- name: environmentSuffix
  displayName: Environment
  type: string
  default: dev
  values:
  - dev
  - qa
  - prod
- name: enableAuthentication
  displayName: Configure the application to use Azure AD for Authentication?
  type: boolean
  default: false

variables:
- template: variables.yml # Generic and/or generated variables
- template: variables-azure.yml # Deployment related (groups or portal variables work too)
  parameters:
    resourceGroupNameBase: ${{ parameters.resourceGroupNameBase }}
    baseName: # Leave empty to build name based on resource group and location
    environmentSuffix: ${{ parameters.environmentSuffix }}
    enableAuthentication: ${{ parameters.enableAuthentication }}
# Include a group if you prefer that over yaml for things like secrets and service connection names
# Hardcoding or specifying as a parameter both work
#- group: groupName | ${{ parameters.variableGroupName }}
- group: arriba-pat
- ${{ if parameters.enableAuthentication }}:
  - group: arriba-authentication
- name: shouldDeploy # Only run deployment when merging to master unless specifically configured during manual run
  value: >-
    $[or(
      eq(variables['isMasterMerge'], 'True'),
      ${{ parameters.overrideDeploy }}
    )]

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build
    displayName: Build ASP.NET Core App 3.1
    pool:
      vmImage: ubuntu-latest
    steps:

    - script: |
        docker-compose build
        docker image ls
      condition: false
      displayName: Run docker-compose from bash

    - task: DockerCompose@0
      displayName: Docker Compose
      inputs:
        containerregistrytype: Azure Container Registry
        azureSubscriptionEndpoint: $(azureSubscriptionTeamServicesServiceConnectionName)
        azureContainerRegistry: $(azureSubscriptionTeamServicesAcrName)
        qualifyImageNames: false
        includeLatestTag: false
        dockerComposeFile: ./docker-compose.yml
        dockerComposeFileArgs: |
          AZPAT = $(AZPAT)
          APPSECRET = $(APPSECRET)
        action: Build services
        additionalImageTags: |
          $(Build.BuildId)
    - script: |
        docker tag arriba-base arriba.azurecr.io/arriba-base:$(Build.BuildId)
        docker tag arriba-server arriba.azurecr.io/arriba-server:$(Build.BuildId)
        docker tag arriba-crawler arriba.azurecr.io/arriba-crawler:$(Build.BuildId)
        docker tag arriba-web arriba.azurecr.io/arriba-web:$(Build.BuildId)
      displayName: Retag local images

    - script: |
        sed -i -e "s/##TAG##/$(Build.BuildId)/g" ./.azure/pipelines/docker-compose.yml        
      displayName: Changing tag from Docker-compose.yml

    - task: DockerCompose@0
      displayName: Docker Push
      inputs:
        containerregistrytype: Azure Container Registry
        azureSubscriptionEndpoint: $(azureSubscriptionTeamServicesServiceConnectionName)
        azureContainerRegistry: $(azureSubscriptionTeamServicesAcrName)
        qualifyImageNames: true
        includeLatestTag: false
        dockerComposeFile: ./docker-compose.yml
        dockerComposeFileArgs: |
          AZPAT = $(AZPAT)
          APPSECRET = $(APPSECRET)
        action: Push services
        additionalImageTags: |
          $(Build.BuildId)

    - task: CopyFiles@2
      displayName: Copy ARM template to ArtifactStagingDirectory
      inputs:
        sourceFolder: .azure/templates
        contents: '*'
        targetFolder: $(Build.ArtifactStagingDirectory)/.azure/templates

    - task: CopyFiles@2
      displayName: Copy composer file to ArtifactStagingDirectory
      inputs:
        sourceFolder: .azure/pipelines/
        contents: docker-compose.yml
        targetFolder: $(Build.ArtifactStagingDirectory)/

    - task: PublishPipelineArtifact@1 # Microsoft recommends this over PublishBuildArtifacts
      displayName: Publish Pipeline Artifacts
      condition: and(succeeded(), eq(variables['shouldDeploy'], 'True'))
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: $(artifactName)

    - script: |
        docker image ls
        pwd
        printenv | sort
        ls -R $(Pipeline.Workspace)
      displayName: Debug script
      condition: always()

- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), eq(variables['shouldDeploy'], 'True'))
  jobs:
  - deployment: deploy
    displayName: Deploy ASP.NET Core App 3.1
    environment: $(environmentName)
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              b64=$(base64 '$(Pipeline.Workspace)/$(artifactName)/docker-compose.yml' --wrap=0)
              encodedComposeString=$(printf "COMPOSE|%s" $b64)
              echo "##vso[task.setvariable variable=DOCKER_ENCODED_COMPOSE_STRING]$encodedComposeString"
            displayName: Encode docker-compose.yml into a variable

          - task: AzureResourceGroupDeployment@2
            displayName: Azure Deployment
            inputs:
              azureSubscription: $(azureSubscriptionServiceConnectionName)
              action: Create Or Update Resource Group
              resourceGroupName: $(resourceGroupName)
              location: $(location)
              csmFile: $(Pipeline.Workspace)/$(artifactName)/$(armTemplateFileArtifactPath)
              deploymentMode: Complete
              deploymentName: $(deploymentName)
              deploymentOutputs: ArmDeploymentOutput
              overrideParameters: >-
                -name $(armTemplateNameParameter)
                -dockerRegistryUrl arriba.azurecr.io
                -dockerRegistryUsername arriba
                -dockerRegistryPassword $(DOCKER_REGISTRY_SERVER_PASSWORD)
                -linuxFxVersion "$(DOCKER_ENCODED_COMPOSE_STRING)"
                -additionalSecrets $(additionalKeyVaultSecrets)

          - pwsh: |
              $output = ConvertFrom-Json '$(ArmDeploymentOutput)' -Depth 10

              $WebAppName  = $output.result.value.WebAppName

              Write-Host "##vso[task.setvariable variable=WEB_APP_NAME]$WebAppName"
            failOnStderr: true
            displayName: Create variables from ARM deployment outputs

          - task: AzureRmWebAppDeployment@4
            condition: false
            displayName: Azure App Service Deploy
            inputs:
              azureSubscription: $(azureSubscriptionServiceConnectionName)
              resourceGroupName: $(resourceGroupName)
              webAppName: $(WEB_APP_NAME)
              webAppKind: Web App for Containers
              packageForLinux: $(Pipeline.Workspace)/$(artifactName)/$(webAppProjectName).zip
              runtimeStack: DOTNETCORE|3.1
              startupCommand: /home/site/wwwroot/$(webAppProjectName)

          - script: |
              echo $(ArmDeploymentOutput)
              pwd
              printenv | sort
              ls -R $(Pipeline.Workspace)
            displayName: Debug script
            condition: always()
